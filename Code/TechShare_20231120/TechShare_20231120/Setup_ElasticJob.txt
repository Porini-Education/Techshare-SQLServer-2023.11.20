
# *** Creation of demo environment for Elastic Job

# parameters 
$tenantid = xxxx
$subscriptionId = xxxx
$resourceGroupTarget ='PoriniSqlEdu02'
$location = "NorthEurope"

$sqlAdminLogin = 'Student00';
$sqlAdminPassword ='SierraTango19$$';
$startIp = "0.0.0.0";
$endIp = "255.255.255.255";

$virtualServer1 = 'poriniedusqlserver-elastic00';
$virtualServer2 = 'poriniedusqlserver-elastic01';
$virtualServer3 = 'poriniedusqlserver-elastic02';


# utility functions

#Check resource existence
Function Get-OKGoOn
   { 
     [cmdletbinding()]
     Param(
       [parameter(Mandatory=$true)] [string] $tipoRisorsa,
       [parameter(Mandatory=$true)] [string] $nomeRisorsa
     )

   $domanda = "{0} {1} già esistente. Proseguo ? (yes,no)"  -f $tipoRisorsa, $nomeRisorsa
   $scelta = Read-Host $domanda
   if ($scelta -ne 'yes') {return 'NO'}
   if ($scelta -eq 'yes') {return 'YES'}

}

#Creation of the Logical Servers
Function New-VirtualServer 
{ 
 [cmdletbinding()]
 Param(
   [parameter(Mandatory=$true)] [string] $virtualServerName,
   [parameter(Mandatory=$true)] [string] $resourceGroup,
   [parameter(Mandatory=$true)] [string] $login,
   [parameter(Mandatory=$true)] [string] $password,
   [parameter(Mandatory=$true)] [string] $startIp,
   [parameter(Mandatory=$true)] [string] $endIP,
   [parameter(Mandatory=$true)] [string] $location

 )

   $Esiste = 0;
   $servers = Get-AzSqlServer
   foreach ($a in $servers)
       {
           if ($a.ServerName -eq $virtualServerName) {$Esiste = 1}
       }

   if($Esiste -eq 0) {

               [securestring]$secStringPassword = ConvertTo-SecureString $password -AsPlainText -Force
               [pscredential]$cred = New-Object System.Management.Automation.PSCredential ($login,$secStringPassword)


              $Parameters = @{
                   ResourceGroupName = $resourceGroup
                   Location = $location     
                   ServerName = $virtualServerName
                   SqlAdministratorCredentials = $cred
               }

             $server = New-AzSqlServer @Parameters

             #Apertura Firewall sull'intervallo IP address
               $Parameters = @{
                   ResourceGroupName = $resourceGroup   
                   ServerName = $virtualServerName
                   FirewallRuleName = "AllowedIPs"
                   StartIpAddress = $startIp
                   EndIpAddress = $endIp

               }

           $serverfirewallrule = New-AzSqlServerFirewallRule @Parameters

           Write-Host "Virtual server $virtualServerName Creato" -ForegroundColor Green

   }

   return $Esiste
}

# Creation of the Azure Sql Databases
Function New-AzureDB 
{ 
 [cmdletbinding()]
 Param(
   [parameter(Mandatory=$true)] [string] $logicalServerName,
   [parameter(Mandatory=$true)] [string] $resourceGroup,
   [parameter(Mandatory=$true)] [string] $dataBaseName,
   [parameter(Mandatory=$true)] [string] $serviceLevel

 )
   $Esiste = 0;
   $dbs = Get-AzSqlDatabase -ResourceGroupName $resourceGroup -ServerName $logicalServerName

   foreach ($a in $dbs)
       {
           if ($a.DatabaseName -eq $dataBaseName) {$Esiste= 1}
       }

   if($Esiste -eq 0) {


           $Parameters = @{
               ResourceGroupName = $resourceGroup   
               ServerName = $logicalServerName
               Edition = 'Standard'
               DatabaseName = $dataBaseName
               RequestedServiceObjectiveName = $serviceLevel
               SampleName =  "AdventureWorksLT"
               LicenseType = "LicenseIncluded"
           }

       $database = New-AzSqlDatabase @Parameters

       Write-Host "Database $dataBaseName Creato" -ForegroundColor Green
   }

   return $Esiste
}

# Connection to Azure
# Connect-AzAccount -Tenant xxxx -SubscriptionId xxxx



# Creation of the Resource Groups

   #Valorizzo il flag se esiste il resource group
   $Flag = 0;

   $Risorse = Get-AzResourceGroup
   foreach ($a in $Risorse)
   {
       if ($a.ResourceGroupName -eq $ResourceGroupTarget) {$Flag= 1}
   }

   if($Flag -eq 0) 
       {
           New-AzResourceGroup -Name $resourceGroupTarget -Location $location
           Write-Host "Resource group $resourceGroupTarget Creato" -ForegroundColor Green
       };

   if($Flag -ne 0) 
   {
       $scelta = Read-Host "Resource group  $resourceGroupTarget già esistente. Proseguo ? (yes,no)"
       if ($scelta -ne 'yes') {return}
   }


# Creation of the Logical Servers

$Parameters = @{
   resourceGroup = $resourceGroupTarget
   location = $location     
   login = $sqlAdminLogin
   password = $sqlAdminPassword
   startIp = $startIp
   endIp = $endIp

}

$esiste = New-VirtualServer  -virtualServerName $virtualServer1   @Parameters
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Virtual server" -nomeRisorsa $virtualServer1;  if ($scelta -ne 'yes') {return}}  


$esiste = New-VirtualServer  -virtualServerName $virtualServer2  @Parameters
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Virtual server" -nomeRisorsa $virtualServer2;  if ($scelta -ne 'yes') {return}}  


$esiste = New-VirtualServer  -virtualServerName $virtualServer3   @Parameters
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Virtual server" -nomeRisorsa $virtualServer3;  if ($scelta -ne 'yes') {return}}  



#Creation of the Databases

$esiste = New-AzureDB -logicalServerName $virtualServer1 -dataBaseName 'db00' -serviceLevel 'S0' $resourceGroupTarget
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Database " -nomeRisorsa 'db00';  if ($scelta -ne 'yes') {return}}  

$esiste = New-AzureDB -logicalServerName $virtualServer2 -dataBaseName 'db01' -serviceLevel 'S0' $resourceGroupTarget
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Database " -nomeRisorsa 'db01';  if ($scelta -ne 'yes') {return}}  

$esiste = New-AzureDB -logicalServerName $virtualServer2 -dataBaseName 'db02' -serviceLevel 'S0' $resourceGroupTarget
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Database " -nomeRisorsa 'db02';  if ($scelta -ne 'yes') {return}}  


$esiste = New-AzureDB -logicalServerName $virtualServer3 -dataBaseName 'db03' -serviceLevel 'S0' $resourceGroupTarget
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Database " -nomeRisorsa 'db03';  if ($scelta -ne 'yes') {return}}  

$esiste = New-AzureDB -logicalServerName $virtualServer3 -dataBaseName 'db04' -serviceLevel 'S0' $resourceGroupTarget
if ($esiste -eq 1)  {$scelta = Get-OKGoOn -tipoRisorsa "Database " -nomeRisorsa 'db04';  if ($scelta -ne 'yes') {return}}  


# Creation of the Elastic Job Agent
$jobDatabase= Get-AzSqlDatabase -DatabaseName 'db00' -ServerName $virtualServer1 -ResourceGroupName $resourceGroupTarget 

$jobAgent = $jobDatabase | New-AzSqlElasticJobAgent -Name 'PoriniEduElasticJobAgent'


# Creation of the Elastic Pool
   $Parameters = @{
               ResourceGroupName = $resourceGroupTarget   
               ServerName = $virtualServer3
               Edition = 'Standard'
               Dtu = 200 
               DatabaseDtuMin = 10 
               DatabaseDtuMax = 200
           }


   New-AzSqlElasticPool @Parameters  -ElasticPoolName dbpool02


   # Creation
# User Database Credentials
$MasterUserLogin = 'MasterUser';
$MasterUserPassword ='MasterUniform01!';

$JobUserLogin = 'JobUser'
$JobUserPassword ='JulietUniform01!';

$Server01 = $virtualServer1 + ".database.windows.net"
$Server02 = $virtualServer2 + ".database.windows.net"
$Server03 = $virtualServer3 + ".database.windows.net"


# Creation Login and user on all Databases

$q_createMasterLogin = " CREATE LOGIN {0} WITH PASSWORD = '{1}' "  -f $MasterUserLogin, $MasterUserPassword
$q_createMasterUser = " CREATE USER $MasterUserLogin FROM LOGIN $MasterUserLogin; "

$q_createJobLogin = " CREATE LOGIN {0} WITH PASSWORD = '{1}' "  -f $JobUserLogin, $JobUserPassword
$q_createJobUser = " CREATE USER $JobUserLogin FROM LOGIN $JobUserLogin; "

$q_addrolemember = " EXEC sp_addrolemember N'db_owner', N'{0}' " -f $JobUserLogin


# Server 1 - Master
Invoke-Sqlcmd -Query $q_createMasterLogin -ServerInstance $Server01 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobLogin -ServerInstance $Server01 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server01 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server01 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server1 - Master Logins created' -ForegroundColor Green

# Server 1 - db00
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server01 -Database "db00" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server01 -Database "db00" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_addrolemember -ServerInstance $Server01 -Database "db00" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server1 - DB00 Logins created' -ForegroundColor Green


# Server 2 - Master
Invoke-Sqlcmd -Query $q_createMasterLogin -ServerInstance $Server02 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobLogin -ServerInstance $Server02 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server02 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server02 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server2 - Master Logins created' -ForegroundColor Green

# Server 2 - db01
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server02 -Database "db01" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server02 -Database "db01" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_addrolemember -ServerInstance $Server02 -Database "db01" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server2 - DB01 Logins created' -ForegroundColor Green


# Server 2 - db02
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server02 -Database "db02" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server02 -Database "db02" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_addrolemember -ServerInstance $Server02 -Database "db02" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server2 - DB02 Logins created' -ForegroundColor Green

# Server 3 - master
Invoke-Sqlcmd -Query $q_createMasterLogin -ServerInstance $Server03 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobLogin -ServerInstance $Server03 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server03 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server03 -Database "master" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server3 - Master Logins created' -ForegroundColor Green


# Server 3 - db03
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server03 -Database "db03" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server03 -Database "db03" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_addrolemember -ServerInstance $Server03 -Database "db03" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server3 - DB03 Logins created' -ForegroundColor Green

# Server 3 - db04
Invoke-Sqlcmd -Query $q_createMasterUser -ServerInstance $Server03 -Database "db04" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_createJobUser -ServerInstance $Server03 -Database "db04" -Username $sqlAdminLogin -Password $sqlAdminPassword
Invoke-Sqlcmd -Query $q_addrolemember -ServerInstance $Server03 -Database "db04" -Username $sqlAdminLogin -Password $sqlAdminPassword

Write-Host ' Server3 - DB04 Logins created' -ForegroundColor Green
